/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-present by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.webdialog;

import java.util.ArrayList;
import java.util.List;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ResolveInfo;
import android.net.Uri;
import android.app.PendingIntent;
import android.graphics.BitmapFactory;

import android.support.customtabs.CustomTabsIntent;
import android.support.customtabs.CustomTabsService;


@Kroll.module(name="TitaniumWebDialog", id="ti.webdialog")
public class TitaniumWebDialogModule extends KrollModule
{
  // Standard Debugging variables
  private static final String LCAT = "TiWebDialog";
  
  private List<String> getCustomTabBrowsers(Context context, List<ResolveInfo> browsersList) {
    List<String> customTabBrowsers = new ArrayList<String>();
    
    for (ResolveInfo info : browsersList) {
      String packageName = info.activityInfo.packageName;
      
      Intent intent = new Intent();
      intent.setAction(CustomTabsService.ACTION_CUSTOM_TABS_CONNECTION);
      intent.setPackage(packageName);
      
      if (context.getPackageManager().resolveService(intent, 0) != null) {
        customTabBrowsers.add(packageName);
      }
    }
    
    return customTabBrowsers;
  }
  
  private void openCustomTab(Context context, List<String> customTabBrowsers, KrollDict options) {
    String URL = options.getString(Params.URL);
    URL = URL.toLowerCase();
    
    if (!URL.startsWith("http")) {
      URL = "http://" + URL;
    }
    
    CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder();
    builder.setShowTitle(Utils.getBool(options, Params.SHOW_TITLE));
    
    int barColor = Utils.getColor(options, Params.BAR_COLOR);
    if (barColor != -1) {
      builder.setToolbarColor(barColor);
    }
    
    // set start and exit animations
    if (Utils.getBool(options, Params.FADE_TRANSITION)) {
      builder.setStartAnimations(context, android.R.anim.fade_in, android.R.anim.fade_out);
      builder.setExitAnimations(context, android.R.anim.fade_in, android.R.anim.fade_out);
    }
    
    //enable Share link option
    if (Utils.getBool(options, Params.ENABLE_SHARING)) {
    	builder.addDefaultShareMenuItem();
    }
    
    //set close button icon from R.drawable if exists, else use default close icon
    String closeIcon = Utils.getString(options, Params.CLOSE_ICON); 
    if (!closeIcon.isEmpty()) {
    	closeIcon = "drawable." + closeIcon;
    	int drawable = Utils.getR(closeIcon);
    	
    	if (drawable != -1) {
    		builder.setCloseButtonIcon(BitmapFactory.decodeResource(TiApplication.getAppRootOrCurrentActivity().getResources(), drawable));
    	}
    }
    
    CustomTabsIntent tabIntent = builder.build();
    
    for(String s:customTabBrowsers) {
      tabIntent.intent.setPackage(s);
    }
    
    tabIntent.launchUrl(context, Uri.parse(URL));
  }
  
  @Kroll.method
  public void open(KrollDict options) {
    if ((options != null) && options.containsKeyAndNotNull(Params.URL)) {
      Context context = TiApplication.getAppCurrentActivity();
      List<ResolveInfo> browsersList = Utils.allBrowsers(context);
      
      if (!browsersList.isEmpty()) {
        List<String> customTabBrowsers = getCustomTabBrowsers(context, browsersList);
        
        // show supported browsers list or open directly if only 1 supported browser is available
        openCustomTab(context, customTabBrowsers, options);
      } else {
        Log.i(Params.LCAT, "No browsers available in this device.");
      }
    }
  }

  @Kroll.method
  public boolean isSupported() {
    Context context = TiApplication.getAppCurrentActivity();
    List<ResolveInfo> browsersList = Utils.allBrowsers(context);
    
    return !browsersList.isEmpty();
  }
  
  @Kroll.method
  public void close(KrollDict options) {
    Log.e(Params.LCAT, "The \"close\" method is not implemented, yet!");
  }
  
  @Kroll.method
  public boolean isOpen(KrollDict options) {
    Log.e(Params.LCAT, "The \"isOpen\" method is not implemented, yet!");
    return false;
  }
}
